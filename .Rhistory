data = training_set)
summary(classifier_manual1)
classifier_manual1 <- glm(teamRslt ~ diff_steals_exactly + diff_lastFive + diff_pts + diff_points_5last + diff_assists_5last + bestplayer6_points_5last + opp_bestplayer4_points_5last + diff_sos - 1,
family = binomial,
data = training_set)
summary(classifier_manual1)
classifier_manual1 <- glm(teamRslt ~ diff_steals_exactly + diff_lastFive + diff_pts + diff_points_5last + bestplayer6_points_5last + opp_bestplayer4_points_5last + diff_sos - 1,
family = binomial,
data = training_set)
summary(classifier_manual1)
classifier_manual1 <- glm(teamRslt ~ diff_steals_exactly + diff_lastFive + diff_pts + diff_points_5last + bestplayer6_points_5last + diff_sos - 1,
family = binomial,
data = training_set)
summary(classifier_manual1)
classifier_manual1 <- glm(teamRslt ~ diff_steals_exactly + diff_lastFive + diff_pts + diff_points_5last + bestplayer6_points_5last + opp_bestplayer4_points_5last + diff_sos - 1,
family = binomial,
data = training_set)
summary(classifier_manual1)
classifier_manual1 <- glm(teamRslt ~ diff_steals_exactly + diff_lastFive + diff_pts + diff_points_5last + bestplayer6_points_5last + diff_sos - 1,
family = binomial,
data = training_set)
summary(classifier_manual1)
classifier_manual1 <- glm(teamRslt ~ diff_steals_exactly + diff_lastFive + diff_pts + diff_points_5last + diff_sos - 1,
family = binomial,
data = training_set)
summary(classifier_manual1)
classifier_manual1 <- glm(teamRslt ~ diff_lastFive + diff_pts + diff_points_5last + diff_sos - 1,
family = binomial,
data = training_set)
summary(classifier_manual1)
classifier_manual1 <- glm(teamRslt ~ diff_lastFive + diff_pts + diff_points_5last - 1,
family = binomial,
data = training_set)
summary(classifier_manual1)
prob_pred_manual1 <- predict(classifier_manual1, type = 'response', newdata = test_set)
y_pred_manual1 <- ifelse(prob_pred_manual1 >= 0.5, 1, 0)
cm_glm_manual1 <- table(test_set$teamRslt, y_pred_manual1)
prob_pred_manual <- predict(classifier_manual, type = 'response', newdata = test_set)
y_pred_manual <- ifelse(prob_pred_manual >= 0.5, 1, 0)
cm_glm_manual <- table(test_set$teamRslt, y_pred_manual)
cm_glm_manual
cm_glm_manual1
cm_glm_stepwise
cm_glm
623+87+111+595
(87+111)/(1416)
(623+595)/(1416)
cm_glm_stepwise
(621+595)/1416
cm_glm_manual
cm_glm_manual1
(106+90)/1416
(620+600)/1416
library(rpart)
classifier_tree = rpart(teamRslt ~ .,
data = training_set)
summary(classifier_tree)
y_pred_tree = predict(classifier_tree, newdata = test_set, type = 'class')
cm_tree = table(test_set$teamRslt, y_pred_tree)
cm_tree
acc_glm = (623+595)/(1416) #0.8601695
acc_glm_stepwise = (621+595)/1416 #0.8587571
acc_glm_manual1 = (620+600)/1416 #0.8615819
cm_tree = table(test_set$teamRslt, y_pred_tree)
cm_tree
acc_tree = (629+569)/1416
acc_tree
step.model <- stepAIC(classifier_tree, direction = "both",
trace = TRUE)
library(corrplot)
corrplot(cor(training_set))
cor(training_set)
cor(training_set)
str(training_set)
corrplot(cor(training_set[, c(4:40)]))
corrplot(cor(training_set[, c(4:40)]), method = 'circle')
corrplot(cor(training_set[, c(4:40)]), method = 'ellipse')
str(wynik)
head(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])
cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])
cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) > 0.5
cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])[cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) >= 0.5 | cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) <= 0.5]
cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])[cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) >= 0.5 | cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) <= -0.5]
cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])[(cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) >= 0.5 | cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) <= -0.5) & cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) != 1]
corrplot(cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])[(cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) >= 0.5 | cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) <= -0.5) & cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) != 1])
cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])[cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) ==
cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])[(cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) >= 0.5 | cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) <= -0.5) & cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) != 1]]
cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])[cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) %in%
cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])[(cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) >= 0.5 | cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) <= -0.5) & cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]) != 1]]
corrplot(cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]), method = 'number')
par()
test_wynik = wynik
length(colnames(test_wynik))
test_wynik = wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")]
colnames(test_wynik) = paste0('v', 1:length(colnames(test_wynik)))
View(test_wynik)
corrplot(cor(test_wynik), method = 'number')
cor_matrix = cor(test_wynik)
colnames(cor_matrix[(cor_matrix <= -0.5 & cor_matrix >= 0.5) & cor_matrix != 1])
cor_matrix[(cor_matrix <= -0.5 & cor_matrix >= 0.5) & cor_matrix != 1]
cor_matrix[(cor_matrix <= -0.5 | cor_matrix >= 0.5) & cor_matrix != 1]
colnames(cor_matrix[(cor_matrix <= -0.5 | cor_matrix >= 0.5) & cor_matrix != 1])
any(c(1:5, -3) < 0)
cor_matrix[, 1]
colnames(cor_matrix[, 1])
colnames(cor_matrix[1])
cor_matrix[1]
cor_matrix[1,]
cor_matrix[, 1]
cor_matrix[[1]]
cor_matrix
cor_matrix[, 1]
cor_matrix[, 1, drop = F]
colnames(cor_matrix[, 1, drop = F])
colnames(cor_matrix[, 2, drop = F])
cor_matrix[, 2, drop = F] >= 0.5 & cor_matrix[, 2, drop = F] != 1
any(cor_matrix[, 2, drop = F] >= 0.5 & cor_matrix[, 2, drop = F] != 1)
any(cor_matrix[, 2] >= 0.5 & cor_matrix[, 2] != 1)
for (i in 1:length(colnames(cor_matrix))) {
if any((cor_matrix[, i] >= 0.5 | cor_matrix[, i] <= -0.5) & cor_matrix[, i] != 1) {t <- c(t, colnames(matrix[, i, drop = F]))
} else {next}
}
t= c()
for (i in 1:length(colnames(cor_matrix))) {
if (any((cor_matrix[, i] >= 0.5 | cor_matrix[, i] <= -0.5) & cor_matrix[, i] != 1)) {t <- c(t, colnames(matrix[, i, drop = F]))
} else {next}
}
t= c()
for (i in 1:length(colnames(cor_matrix))) {
if (any((cor_matrix[, i] >= 0.5 | cor_matrix[, i] <= -0.5) & cor_matrix[, i] != 1)) {t <- c(t, colnames(cor_matrix[, i, drop = F]))
} else {next}
}
t
cor(test_wynik)
cor_matrix = cor(wynik[, -c("teamConf", "teamLoc", "teamRslt", "id")])
t= c()
for (i in 1:length(colnames(cor_matrix))) {
if (any((cor_matrix[, i] >= 0.5 | cor_matrix[, i] <= -0.5) & cor_matrix[, i] != 1)) {t <- c(t, colnames(cor_matrix[, i, drop = F]))
} else {next}
}
t
t
corrplot(cor(wynik[, t]))
corrplot(cor(wynik[, get(t)]))
corrplot(cor(wynik[, get("t")]))
corrplot(cor(wynik[, .(get("t"))]))
head(wynik[, 1:2])
head(wynik[, c("teamConf", "teamLOC")])
head(wynik[, c("teamConf", "teamLoc")])
b <- c("teamConf", "teamLoc")
head(wynik[, b])
head(wynik[, .(b)])
head(wynik[, .(get(b))])
head(wynik[, .(get("b"))])
get(b)
get("b")
head(wynik[, get("b")])
head(wynik[, c(get("b"))])
head(wynik[, c(get("t"))])
head(wynik[, "t"])
head(wynik[, c(t)])
cor(wynik[, c(get("t"))])
corrplot(cor(wynik[, c(get("t"))]))
par(mfrow=c(1,2), mar=c(10,1,10,2))
corrplot(cor(wynik[, c(get("t"))]))
par(mfrow=c(1,2), mar=c(10,10,10,10))
corrplot(cor(wynik[, c(get("t"))]))
dev.new(width=5, height=4)
corrplot(cor(wynik[, c(get("t"))]))
corrplot(cor(wynik[, c(get("t"))]))
dev.new(width=5, height=4)
dev.new(width=5, height=4)
corrplot(cor(wynik[, c(get("t"))]))
corrplot(cor(wynik[, c(get("t"))]), method = 'number')
corrplot(cor(wynik[, .(diff_games, diff_home_games, diff_away_games, diff_lastFive, diff_pts, diff_off_rebounds, diff_points_5last)]), method = 'number')
corrplot(cor(wynik[, c(get("t"))]), method = 'number')
var(wynik$diff_turnovers_exactly)
var(wynik$diff_steals_exactly)
corrplot(cor(wynik[, .(diff_games, diff_home_games, diff_away_games, diff_lastFive, diff_pts, diff_off_rebounds, diff_points_5last)]), method = 'number')
var(wynik$diff_games)
var(wynik$diff_home_games)
var(wynik$diff_away_games)
var(wynik$diff_pts)
plot(wynik$teamRslt, wynik$diff_turnovers_exactly)
barchart(wynik$teamRslt, wynik$diff_turnovers_exactly)
barplot(wynik$teamRslt, wynik$diff_turnovers_exactly)
var(wynik$diff_points_5last)
var(wynik$diff_lastFive)
wynik[, `:=`(diff_lastFive = NULL,
diff_games = NULL,
diff_home_games = NULL,
diff_away_games = NULL,
diff_steals_exactly = NULL)]
library(caTools)
set.seed(123)
wynik$id = c(1:3538)
split <- sample.split(wynik$id, SplitRatio = 0.60)
training_set <- subset(wynik, split == T)
test_set <- subset(wynik, split == F)
training_set$id = NULL
classifier <- glm(teamRslt ~ .,
family = binomial,
data = training_set)
step.model <- stepAIC(classifier, direction = "both",
trace = TRUE)
test_set$id <- NULL
prob_pred <- predict(classifier, type = 'response', newdata = test_set)
prob_pred_stepwise <- predict(step.model, type = 'response', newdata = test_set)
y_pred <- ifelse(prob_pred >= 0.5, 1, 0)
y_pred_stepwise <- ifelse(prob_pred_stepwise >= 0.5, 1, 0)
cm_glm <- table(test_set$teamRslt, y_pred)
cm_glm_stepwise <- table(test_set$teamRslt, y_pred_stepwise)
cm_glm
cm_glm_stepwise
cm_glm_manual #gorzej
games_all <- fread('games_all.csv')
stand_all <- fread('stand_all.csv')
players_all <- fread('players_all.csv')
#str(stand_all)
stand_all_final <- stand_all[, .(stDate, teamAbbr, gameWon, gameLost, homeWin, homeLoss, awayWin, awayLoss, lastFive, ptsScore, ptsAllow, sos, stkType, avg_def_rebounds, avg_off_rebounds, avg_turnovers_all, avg_assists_all, avg_steals_all, avg_blocks_all, avg_points_5last, avg_points_lost_5last, avg_deff_rebounds_5last, avg_off_rebounds_5last, avg_assists_5last, avg_turnovers_5last, avg_steals_5last, avg_blocks_5last, two_points_prc_5last, two_points_prc_all, three_points_prc_all, three_points_prc_5last, bestplayer1_points_5last, bestplayer2_points_5last, bestplayer3_points_5last, bestplayer4_points_5last, bestplayer5_points_5last, bestplayer6_points_5last)]
#str(games_all)
games_all_final <- games_all[, .(gmDate, gmTime, teamAbbr, teamConf, teamLoc, teamRslt, teamDayOff, opptAbbr, opptConf, opptDayOff, avg_deff_rebounds_exactly, avg_off_rebounds_exactly, avg_points_exactly, avg_points_lost_exactly, avg_turnovers_exactly, avg_assists_exactly, avg_steals_exactly, avg_blocks_exactly, two_points_prc_exactly, three_points_prc_exactly)]
test <- merge(games_all_final, stand_all_final, by.x = c("gmDate", "teamAbbr"), by.y = c("stDate", "teamAbbr"))
#str(test)
stand_all_final_opp <- stand_all_final
#colnames(stand_all_final_opp)
colnames(stand_all_final_opp)[3:37] <- paste0('opp_', colnames(stand_all_final_opp)[3:37])
test1 <- merge(test, stand_all_final_opp, by.x = c("gmDate", "opptAbbr"), by.y = c('stDate', 'teamAbbr'))
#colnames(test1)
games_all_final_opp <- games_all_final
#colnames(games_all_final_opp)
colnames(games_all_final_opp)[c(4:7, 11:20)] <- paste0('opp_', colnames(games_all_final_opp)[c(4:7, 11:20)])
test2 <- merge(test1, games_all_final_opp[, c(1, 3:7, 11:20)], by.x = c("gmDate", "opptAbbr"), by.y = c('gmDate', 'teamAbbr'))
#colnames(test2)
test2[, `:=`(diff_Dayoff = teamDayOff - opp_teamDayOff,
diff_deff_rebounds_exactly = avg_deff_rebounds_exactly - opp_avg_deff_rebounds_exactly,
diff_off_rebounds_exactly = avg_off_rebounds_exactly - opp_avg_off_rebounds_exactly,
diff_points_exactly = (avg_points_exactly - avg_points_lost_exactly) - (opp_avg_points_exactly - opp_avg_points_lost_exactly),
diff_turnovers_exactly = avg_turnovers_exactly - opp_avg_turnovers_exactly,
diff_assits_exactly = avg_assists_exactly - opp_avg_assists_exactly,
diff_steals_exactly = avg_steals_exactly - opp_avg_steals_exactly,
diff_blocks_exactly = avg_blocks_exactly - opp_avg_blocks_exactly,
diff_two_points_prc_exactly = two_points_prc_exactly - opp_two_points_prc_exactly,
diff_three_points_prc_exactly = three_points_prc_exactly - opp_three_points_prc_exactly,
diff_games = (gameWon - gameLost) - (opp_gameWon - opp_gameLost),
diff_home_games = (homeWin - homeLoss) - (opp_homeWin - opp_homeLoss),
diff_away_games = (awayWin - awayLoss) - (opp_awayWin - opp_awayLoss),
diff_lastFive = lastFive - opp_lastFive,
diff_pts = (ptsScore - ptsAllow) - (opp_ptsScore - opp_ptsAllow),
diff_def_rebounds = avg_def_rebounds - opp_avg_def_rebounds,
diff_off_rebounds = avg_off_rebounds - opp_avg_off_rebounds,
diff_turnovers = avg_turnovers_all - opp_avg_turnovers_all,
diff_assists = avg_assists_all - opp_avg_assists_all,
diff_steals = avg_steals_all - opp_avg_steals_all,
diff_blocks = avg_blocks_all - opp_avg_blocks_all,
diff_points_5last = (avg_points_5last - avg_points_lost_5last) - (opp_avg_points_5last - opp_avg_points_lost_5last),
diff_def_rebounds_5last = avg_deff_rebounds_5last - opp_avg_deff_rebounds_5last,
diff_off_rebounds_5last = avg_off_rebounds_5last - opp_avg_off_rebounds_5last,
diff_assists_5last = avg_assists_5last - opp_avg_assists_5last,
diff_turnovers_5last = avg_turnovers_5last - opp_avg_turnovers_5last,
diff_blocks_5last = avg_blocks_5last - opp_avg_blocks_5last,
diff_steals_5last = avg_steals_5last - opp_avg_steals_5last,
diff_two_points_prc = two_points_prc_all - opp_two_points_prc_all,
diff_three_points_prc = three_points_prc_all - opp_three_points_prc_all,
diff_two_points_prc_5last = two_points_prc_5last - opp_two_points_prc_5last,
diff_three_points_prc_5last = three_points_prc_5last - opp_three_points_prc_5last)]
colnames(test2)
wynik <- test2[, .(gmDate,
gmTime,
#teamAbbr,
#opptAbbr,
teamConf,
teamLoc,
teamRslt,
diff_Dayoff,
diff_deff_rebounds_exactly,
diff_off_rebounds_exactly,
diff_points_exactly,
diff_turnovers_exactly,
diff_assits_exactly,
diff_steals_exactly,
diff_blocks_exactly,
diff_two_points_prc_exactly,
diff_three_points_prc_exactly,
diff_games,
diff_home_games,
diff_away_games,
diff_lastFive,
diff_pts,
diff_def_rebounds,
diff_off_rebounds,
diff_turnovers,
diff_assists,
diff_steals,
diff_blocks,
diff_points_5last,
diff_def_rebounds_5last,
diff_off_rebounds_5last,
diff_assists_5last,
diff_turnovers_5last,
diff_blocks_5last,
diff_steals_5last,
diff_two_points_prc,
diff_three_points_prc,
diff_two_points_prc_5last,
diff_three_points_prc_5last,
bestplayer1_points_5last,
bestplayer2_points_5last,
bestplayer3_points_5last,
bestplayer4_points_5last,
bestplayer5_points_5last,
bestplayer6_points_5last,
opp_bestplayer1_points_5last,
opp_bestplayer2_points_5last,
opp_bestplayer3_points_5last,
opp_bestplayer4_points_5last,
opp_bestplayer5_points_5last,
opp_bestplayer6_points_5last,
sos,
opp_sos
)]
#unique(wynik$gmDate)
sapply(wynik, function(x) {sum(is.na(x))})
wynik <- wynik[(gmDate >= '2016-11-25' &  gmDate <= '2017-04-12') | gmDate >= '2017-11-17']
wynik[, `:=`(diff_steals = NULL,
diff_turnovers = NULL,
diff_assists = NULL,
diff_blocks = NULL,
diff_two_points_prc = NULL,
diff_three_points_prc = NULL,
diff_two_points_prc_5last = NULL,
diff_three_points_prc_5last = NULL
)]
wynik <- wynik[!(is.na(diff_assits_exactly))]
wynik <- wynik[!(is.na(bestplayer5_points_5last))]
wynik <- wynik[!(is.na(opp_bestplayer5_points_5last))]
rm(games_all, games_all_final, games_all_final_opp, players_all, stand_all, stand_all_final, stand_all_final_opp, test, test1, test2)
wynik$teamRslt <- as.factor(ifelse(wynik$teamRslt == 'Win', 1, 0))
wynik$teamLoc <- as.factor(ifelse(wynik$teamLoc == 'Home', 1, 0))
wynik$teamConf <- as.factor(ifelse(wynik$teamConf == 'West', 1, 0))
wynik$diff_sos = wynik$sos - wynik$opp_sos
wynik[, ':='(sos = NULL,
opp_sos = NULL,
gmDate = NULL,
gmTime = NULL)]
set.seed(123)
wynik$id = c(1:3538)
split <- sample.split(wynik$id, SplitRatio = 0.60)
training_set <- subset(wynik, split == T)
test_set <- subset(wynik, split == F)
training_set$id = NULL
classifier <- glm(teamRslt ~ .,
family = binomial,
data = training_set)
step.model <- stepAIC(classifier, direction = "both",
trace = TRUE)
test_set$id <- NULL
prob_pred <- predict(classifier, type = 'response', newdata = test_set)
prob_pred_stepwise <- predict(step.model, type = 'response', newdata = test_set)
y_pred <- ifelse(prob_pred >= 0.5, 1, 0)
y_pred_stepwise <- ifelse(prob_pred_stepwise >= 0.5, 1, 0)
cm_glm <- table(test_set$teamRslt, y_pred)
cm_glm_stepwise <- table(test_set$teamRslt, y_pred_stepwise)
cm_glm
cm_glm_stepwise
classifier_manual <- glm(teamRslt ~ diff_turnovers_exactly + diff_steals_exactly + diff_lastFive + diff_pts + diff_points_5last + diff_assists_5last + bestplayer6_points_5last + opp_bestplayer4_points_5last + diff_sos - 1,
family = binomial,
data = training_set)
prob_pred_manual <- predict(classifier_manual, type = 'response', newdata = test_set)
y_pred_manual <- ifelse(prob_pred_manual >= 0.5, 1, 0)
cm_glm_manual <- table(test_set$teamRslt, y_pred_manual)
cm_glm_manual
classifier_manual1 <- glm(teamRslt ~ diff_lastFive + diff_pts + diff_points_5last - 1,
family = binomial,
data = training_set)
prob_pred_manual1 <- predict(classifier_manual1, type = 'response', newdata = test_set)
y_pred_manual1 <- ifelse(prob_pred_manual1 >= 0.5, 1, 0)
cm_glm_manual1 <- table(test_set$teamRslt, y_pred_manual1)
cm_glm_manual1
summary(classifier_manual1)
library(rpart)
classifier_tree = rpart(teamRslt ~ .,
data = training_set)
y_pred_tree = predict(classifier_tree, newdata = test_set, type = 'class')
cm_tree = table(test_set$teamRslt, y_pred_tree)
cm_tree
acc_tree = (629+569)/1416 #0.8460452
library(rattle)
classifier_tree$cptable
plotcp(classifier_tree)
classifier_tree = rpart(teamRslt ~ .,
data = training_set, cp = 0)
y_pred_tree = predict(classifier_tree, newdata = test_set, type = 'class')
cm_tree = table(test_set$teamRslt, y_pred_tree)
cm_tree
acc_tree = (582+547)/1416 #0.8460452
acc_tree
classifier_tree$cptable
plotcp(classifier_tree)
cp_optimal <- classifier_tree$cptable[which(classifier_tree$cptable[,"xerror"]==min(classifier_tree$cptable[,"xerror"])),"CP"]
cp_optimal
rpart_optimal <- prune(classifier_tree, cp_optimal)
rpart_optimal
y_pred_tree_optimal = predict(rpart_optimal, newdata = test_set, type = 'class')
cm_tree_optimal = table(test_set$teamRslt, y_pred_tree_optimal)
cm_tree_optimal
acc_tree_optimal = (629+569)/1416 #0.7973164
acc_tree_optimal
library(randomForest)
classifier_forest = randomForest(teamRslt ~ .,
data = training_set,
ntree = 500)
y_pred_forest = predict(classifier_forest, newdata = test_set)
cm_forest = table(test_set$teamRslt, y_pred_forest)
cm_forest
acc_forest = (600+558)/1416
acc_forest
fancyRpartPlot(rpart_ioptimal)
fancyRpartPlot(rpart_optimal)
library(party)
ctree_initial <- ctree(teamRslt~., data=trainingset,controls = ctree_control(teststat = "quad", testtype = "Bonferroni", mincriterion = 0.99))
ctree_initial <- ctree(teamRslt~., data=training_set,controls = ctree_control(teststat = "quad", testtype = "Bonferroni", mincriterion = 0.99))
ctree_prediction <- predict(ctree_initial, newdata=test_set)
cm_ctree = table(test_set$teamRslt, ctree_prediction)
cm_ctree
acc_ctree = (629+569)/1416 #0.08460452
varImpPlot(classifier_forest)
mtry<-c(1:ncol(training_set))
mtry
error<-c()
for(i in 1:length(mtry)){
print(i)
error[i] <- randomForest(teamRslt~., data=training_set, ntree=50, mtry=mtry[i])$mse[50]
}
plot(mtry, error, type="l")
plot(mtry, error, type="l")
which.min(error)
for(i in 1:length(mtry)){
print(i)
error[i] <- randomForest(teamRslt~., data=training_set, ntree=50, mtry=mtry[i])$mse[100]
}
for(i in 1:length(mtry)){
print(i)
error[i] <- randomForest(teamRslt~., data=training_set, ntree=100, mtry=mtry[i])$mse[100]
}
plot(mtry, error, type="l")
error
mtry<-c(1:ncol(training_set))
error<-c()
length(mtry)
error[1] <- randomForest(teamRslt~., data=training_set, ntree=100, mtry=mtry[1])$mse[100]
error[1]
randomForest(teamRslt~., data=training_set, ntree=100, mtry=mtry[1])$mse[100]
randomForest(teamRslt~., data=training_set, ntree=100, mtry=mtry[1])$mse
classifier_forest$mse
summary(classifier_forest)
library(randomForest)
randomForest(teamRslt~., data=training_set, ntree=100, mtry=mtry[1])$mse
classifier_forest$confusion
173/886
classifier_forest$err.rate
classifier_forest$err.rate$OOb
classifier_forest$err.rate$OOB
classifier_forest$err.rate[1]
classifier_forest$err.rate[,1]
classifier_forest$err.rate[500,1]
error[1] <- randomForest(teamRslt~., data=training_set, ntree=100, mtry=mtry[1])$err.rate[100,1]
error[1]
mtry<-c(1:ncol(training_set))
error<-c()
for(i in 1:length(mtry)){
print(i)
error[i] <- randomForest(teamRslt~., data=training_set, ntree=100, mtry=mtry[i])$err.rate[100, 1]
}
plot(mtry, error, type="l")
which.min(error)
error(which.min(error))
error[which.min(error))]
error[which.min(error)]
er100 <- error[which.min(error)]
er100
erpos1 <- which.min(error)
erpos1
erpos100 <- which.min(error)
mtry<-c(1:ncol(training_set))
error<-c()
for(i in 1:length(mtry)){
print(i)
error[i] <- randomForest(teamRslt~., data=training_set, ntree=500, mtry=mtry[i])$err.rate[500, 1]
}
plot(mtry, error, type="l")
which.min(error)
erpos500 <- which.min(error)
er500 <- error[which.min(error)]
er100
er500
er100
erpos100 <- which.min(error)
erpos100
erpos100 = 31
rf_optimal <- randomForest(teamRslt~., data=training_set, ntree=500, mtry=31, do.trace=T)
y_pred_forest_optimal = predict(rf_optimal, newdata = test_set)
cm_forest_optimal = table(test_set$teamRslt, y_pred_forest_optimal)
cm_forest_optimal
acc_forest_optimal = (615+576)/1416
acc_forest_optimal
rf_optimal <- randomForest(teamRslt~., data=training_set, ntree=500, mtry=21, do.trace=T)
y_pred_forest_optimal = predict(rf_optimal, newdata = test_set)
cm_forest_optimal = table(test_set$teamRslt, y_pred_forest_optimal)
cm_forest_optimal
acc_forest_optimal = (611+582)/1416
acc_forest_optimal
